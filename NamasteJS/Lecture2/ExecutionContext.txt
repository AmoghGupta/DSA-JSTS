1. Whenever a program is exeucted a GLOBAL Execution context is created.
2. Memory component and code component.
3. Execution context is created in two phase:
    a. MEMORY CREATION PHASE- 
        Starts allocating memory. Allocates 'undefined' to all the variables and for all the 
        functions in code the function is stored as is literally.
    B. CODE EXECUTION PHASE -
        1. variables start getting the values allocated.
        2. function invocation happens to be executed.
        3. when a function is invoked again a local Execution context is created and similar things happen again inside the
        execution context created for that function i.e a new container (execution context) is created inside the global execution
        context.
        4.once a function execution is completed then it returns the control back to the parent exeuction context from where it originated.
        5.once control is passed back to parent then the child context is deleted totally from memory.


4. CALL STACK - is how the execution context is managed.

Global Execution Context<==>Execution Context
Whenever a new execution context is created its pushed into the stack and when deleted its popped out of stack.
CALL STACK maintains the order of execution of execution contexts.


Example Used:

var n = 2;
function square(num){
    var ans = num *num;
    return ans;
}

var square2 = square(n);
var square2 = square(4);

